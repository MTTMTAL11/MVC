@model IEnumerable<RoboGebV6.Models.Racer>
@{
    Layout = null;
    var sortedRacers = Model.OrderBy(r => r.TimeInSeconds).ToList();
    var podiumRacers = sortedRacers.Take(3).ToList();
    var firstPlace = podiumRacers.FirstOrDefault();
    var secondPlace = podiumRacers.Count > 1 ? podiumRacers[1] : null;
    var thirdPlace = podiumRacers.Count > 2 ? podiumRacers[2] : null;
    var lastAddedId = ViewBag.LastAddedId as int?;
}

<!DOCTYPE html>
<html>
<head>
    <title>Yarışmacı Sıralaması</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .header {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 0 0 10px 10px;
        }

        .leaderboard-card {
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            border: none;
            overflow: hidden;
        }

        .container {
            width: 100%;
            max-width: 100%;
        }

        .first-place {
            background-color: #ffd700;
            color: #000;
        }

        .second-place {
            background-color: #c0c0c0;
            color: #000;
        }

        .third-place {
            background-color: #cd7f32;
            color: #000;
        }

        .time-badge {
            background-color: #6a11cb;
            color: white;
        }

        .podium-container {
            display: flex;
            justify-content: center;
            align-items: flex-end;
            height: 300px;
            margin-bottom: 2rem;
            gap: 20px;
        }

        .podium-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            flex: 1;
            max-width: 250px;
        }

        .podium-1 {
            height: 200px;
            width: 100%;
            background: linear-gradient(to right, #f5d742, #ffd700);
            border-radius: 8px 8px 0 0;
        }

        .podium-2 {
            height: 150px;
            width: 100%;
            background: linear-gradient(to right, #d7d7d7, #c0c0c0);
            border-radius: 8px 8px 0 0;
        }

        .podium-3 {
            height: 100px;
            width: 100%;
            background: linear-gradient(to right, #d99a5a, #cd7f32);
            border-radius: 8px 8px 0 0;
        }

        .podium-number {
            font-size: 4rem;
            font-weight: bold;
            margin-top: -90px;
            color: white;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }

        .podium-info {
            margin-top: 10px;
            text-align: center;
            padding: 10px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            width: 100%;
        }

        /* Animasyon Stilleri */
        .racer-moving {
            transition: all 0.3s ease;
            z-index: 100;
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
            background-color: rgba(106, 17, 203, 0.2) !important;
        }

        tr.highlight {
            animation: highlight 2s ease-out;
        }


        .podium-step:hover {
            animation: pulse 1.5s infinite;
            cursor: pointer;
        }

        .racer-row:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .last-updated {
            font-size: 0.9rem;
            color: #6c757d;
        }

        /* Responsive Düzenlemeler */
        @@media (max-width: 768px) {
            .podium-container {
                flex-direction: column;
                align-items: center;
                height: auto;
                gap: 10px;
            }

            .podium-step {
                width: 80%;
                margin-bottom: 20px;
            }

            .podium-number {
                margin-top: -70px;
                font-size: 3rem;
            }
        }
    </style>
</head>
<body>
    <div class="header text-center">
        <div class="container">
            <div class="row">
                <div class="col-1 ms-0 p-0"><img src="~/img/robogeb-removebg.png" width="180" height="180" alt="Alternate Text" /></div>

                <div class="col-10 mt-5 fs-5">
                    <h1><i class=" me-2" style="font-size:60px">Yarışmacı Sıralaması</i></h1>
                    <p class="leadf fs-4">Yarışı bitirme sürelerine göre sıralama</p>

                    <p class="leadf fs-5"><a class="btn btn-outline-primary bg-warning" href="/Account/Index">ANASAYFA</a></p>

                    <p class="last-updated mb-0"><i class="fas fa-sync-alt me-1"></i> Son güncelleme: <span id="update-time">@DateTime.Now.ToString("dd MMMM yyyy, HH:mm")</span></p>
                </div>
                <div class="col-1 ms-0 p-0"> <img src="~/img/robogeb-removebg.png" width="200" height="200" alt="Alternate Text" /> </div>
            </div>
        </div>
    </div>

    <div class="container fs-5">
        <!-- Podyum -->
        <h3 class="mt-5 mb-4"><i class="fas fa-medal me-2"></i>Podyum</h3>
        <div class="podium-container">
            @if (secondPlace != null)
            {
                <div class="podium-step">
                    <div class="podium-2"></div>
                    <div class="podium-number">2</div>
                    <div class="podium-info">
                        <img src="@secondPlace.ProfileImage1" class="rounded-circle mb-2" width="60" height="60" onerror="this.src='https://via.placeholder.com/60'">
                        <h5>@secondPlace.Name</h5>
                        <p class="mb-1">@secondPlace.Team</p>
                        <span class="badge bg-secondary">@secondPlace.FinishTime</span>
                    </div>
                </div>
            }

            @if (firstPlace != null)
            {
                <div class="podium-step">
                    <div class="podium-1"></div>
                    <div class="podium-number">1</div>
                    <div class="podium-info">
                        <img src="@firstPlace.ProfileImage1" class="rounded-circle mb-2" width="80" height="80" onerror="this.src='https://via.placeholder.com/80'">
                        <h4>@firstPlace.Name</h4>
                        <p class="mb-1">@firstPlace.Team</p>
                        <span class="badge first-place">@firstPlace.FinishTime</span>
                    </div>
                </div>
            }

            @if (thirdPlace != null)
            {
                <div class="podium-step">
                    <div class="podium-3"></div>
                    <div class="podium-number">3</div>
                    <div class="podium-info">
                        <img src="@thirdPlace.ProfileImage1" class="rounded-circle mb-2" width="60" height="60" onerror="this.src='https://via.placeholder.com/60'">
                        <h5>@thirdPlace.Name</h5>
                        <p class="mb-1">@thirdPlace.Team</p>
                        <span class="badge third-place">@thirdPlace.FinishTime</span>
                    </div>
                </div>
            }
        </div>

        <!-- Sıralama Tablosu -->
        <div class="container">
            <div class="card leaderboard-card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="card-title mb-0"><i class="fas fa-list-ol me-2"></i>Sıralama Listesi</h2>

                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover align-middle" id="leaderboardTable">
                            <thead>
                                <tr>
                                    <th width="50">#</th>
                                    <th>Yarışmacı</th>
                                    <th class="text-center">Takım</th>
                                    <th class="text-center">Süre</th>
                                    <th class="text-center">Fark</th>
                                    <th class="text-center">İşlemler</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int rank = 1;
                                    foreach (var item in sortedRacers)
                                    {
                                        <tr class="racer-row" style="font-size:36px" data-id="@item.Id" @(item.Id == lastAddedId ? "data-new-racer=true" : "")>
                                            <td>
                                                @if (rank == 1)
                                                {<span class="badge first-place">@rank</span> }
                                            else if (rank == 2)
                                            { <span class="badge second-place">@rank</span> }
                                        else if (rank == 3)
                                        { <span class="badge third-place">@rank</span> }
                                    else
                                    { <span class="badge bg-dark">@rank</span>}
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <img src="@item.ProfileImage1" class="rounded-circle me-3" width="40" height="40" onerror="this.src='https://via.placeholder.com/40'">
                                                    <div>
                                                        <h6 class="mb-0">@item.Name</h6>
                                                        <small class="text-muted">@item.Team</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge @GetTeamBadgeClass(item.Team)">@item.Team</span>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge time-badge">@item.FinishTime</span>
                                            </td>
                                            <td class="text-center @(rank == 1 ? "text-success" : "text-danger")">
                                                @if (rank == 1)
                                                {<i class="fas fa-crown"></i> }
                                                else
                                                { @CalculateTimeDifference(firstPlace.FinishTime, item.FinishTime)}
                                            </td>

                                        </tr>
                                        rank++;
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!--


        <script>
        $(document).ready(function() {
            @if (lastAddedId != null)
            {
                <text>
                // Yeni eklenen yarışmacıyı işle (1 saniye gecikmeyle)
                setTimeout(function() {
                    initNewRacerAnimation(@lastAddedId);
                }, 2000);
                </text>
            }

            function initNewRacerAnimation(racerId) {
                const $racerRow = $(`tr[data-id="${racerId}"]`);

                // 1. Satırı en alta taşı ve başlangıç stilini ayarla
                $racerRow.detach().appendTo('#leaderboardTable tbody')
                         .css({
                             'transform': 'translateY(100px)',
                             'opacity': '0',
                             'position': 'relative',
                             'z-index': '1000'
                         });

                // 2. Giriş animasyonu
                $racerRow.animate({
                    'transform': 'translateY(0)',
                    'opacity': '1'
                }, 800, function() {
                    // 3. Sıralama animasyonunu başlat
                    startSortingAnimation($racerRow);
                });
            }

            function startSortingAnimation($row) {
                const currentPos = $('#leaderboardTable tbody tr').index($row);
                const targetPos = calculateTargetPosition($row);

                if (currentPos === targetPos) {
                    // Doğru pozisyonda - son efekti uygula
                    $row.removeClass('racer-moving')
                        .addClass('highlight')
                        .css('z-index', '1');
                    return;
                }

                // Hareket yönü (-1 yukarı, 1 aşağı)
                const direction = currentPos > targetPos ? -1 : 1;
                const $targetRow = direction === -1 ? $row.prev() : $row.next();

                $row.addClass('racer-moving');

                setTimeout(function() {
                    // Pozisyon değiştirme
                    if (direction === -1) {
                        $row.insertBefore($targetRow);
                    } else {
                        $row.insertAfter($targetRow);
                    }

                    // Animasyon tamamlandığında
                    setTimeout(function() {
                        $row.removeClass('racer-moving');
                        // Bir sonraki adımı başlat
                        setTimeout(function() {
                            startSortingAnimation($row);
                        }, 250); // Adımlar arası bekleme süresi
                    }, 400); // Hareket animasyon süresi
                }, 100);
            }

            function calculateTargetPosition($row) {
                const $allRows = $('#leaderboardTable tbody tr');
                const rowTime = $row.find('.time-badge').text();

                let targetPos = 0;
                $allRows.each(function(index) {
                    const currentTime = $(this).find('.time-badge').text();
                    if (rowTime.localeCompare(currentTime) > 0) {
                        targetPos = index + 1;
                    }
                });

                return targetPos;
            }

            $('#refresh-btn').click(function() {
                location.reload();
            });
        });
        </script>

         -->

    <style>
        .racer-moving {
            transition: all 0.4s cubic-bezier(0.65, 0, 0.35, 1);
            box-shadow: 0 5px 20px rgba(106, 17, 203, 0.4);
            background-color: rgba(106, 17, 203, 0.2) !important;
        }

        tr.highlight {
            animation: highlight 2s ease-out;
        }

        @@keyframes highlight {
            0% {
                background-color: rgba(106, 17, 203, 0.3);
            }

            100% {
                background-color: transparent;
            }
        }
    </style>


</body>
</html>

@functions {
    /*
    string GetTeamBadgeClass(string team)
    {
        if (string.IsNullOrEmpty(team))
            return "bg-secondary"; // Varsayılan renk

        var teamColors = new Dictionary<string, string>
{
        {"A Takımı", "bg-primary"},
        {"B Takımı", "bg-danger"},
        {"C Takımı", "bg-success"},
        {"D Takımı", "bg-warning text-dark"},
        {"E Takımı", "bg-info"},
        {"F Takımı", "bg-purple"},
        {"G Takımı", "bg-pink"}
    };

        return teamColors.TryGetValue(team, out var color) ? color : "bg-secondary";
    }

    string CalculateTimeDifference(string firstTime, string currentTime)
    {
        try
        {
            TimeSpan firstSpan = ParseTimeString(firstTime);
            TimeSpan currentSpan = ParseTimeString(currentTime);
            TimeSpan difference = currentSpan - firstSpan;

            return difference.ToString(@"\+hh\:mm\:ss");
        }
        catch
        {
            return "+0:00:00";
        }
    }



    TimeSpan ParseTimeString(string time)
    {


        var parts = time.Split(':').Select(int.Parse).ToArray();
        return parts.Length == 3
            ? new TimeSpan(parts[0], parts[1], parts[2])
            : new TimeSpan(0, parts[0], parts[1]);
    } */




    string GetTeamBadgeClass(string team)
    {
        if (string.IsNullOrEmpty(team))
            return "bg-secondary"; // Varsayılan renk

        var teamColors = new Dictionary<string, string>
{
            {"A Takımı", "bg-primary"},
            {"B Takımı", "bg-danger"},
            {"C Takımı", "bg-success"},
            {"D Takımı", "bg-warning text-dark"},
            {"E Takımı", "bg-info"},
            {"F Takımı", "bg-purple"},
            {"G Takımı", "bg-pink"}
        };

        return teamColors.TryGetValue(team, out var color) ? color : "bg-secondary";
    }

    string CalculateTimeDifference(string firstTime, string currentTime)
    {
        try
        {
            TimeSpan firstSpan = ParseTimeString(firstTime) ?? TimeSpan.Zero; // Varsayılan değer: 00:00:00
            TimeSpan currentSpan = ParseTimeString(currentTime) ?? TimeSpan.Zero;
            TimeSpan difference = currentSpan - firstSpan;

            return difference.ToString(@"\+hh\:mm\:ss");
        }
        catch
        {
            return "+0:00:00";
        }
    }

    TimeSpan? ParseTimeString(string time)
    {
        if (string.IsNullOrEmpty(time))
        {
            return TimeSpan.Zero; // Varsayılan değer: 00:00:00
        }

        var parts = time.Split(':');

        if (parts.Length < 2 || parts.Length > 3)
        {
            return TimeSpan.Zero; // Beklenmeyen format, varsayılan değer
        }

        int hours = 0, minutes = 0, seconds = 0;

        if (!int.TryParse(parts[0], out hours) || !int.TryParse(parts[1], out minutes))
        {
            return TimeSpan.Zero;
        }

        if (parts.Length == 3 && !int.TryParse(parts[2], out seconds))
        {
            return TimeSpan.Zero;
        }

        try
        {
            return new TimeSpan(hours, minutes, seconds);
        }
        catch
        {
            return TimeSpan.Zero;
        }
    }
}

